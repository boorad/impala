/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package test;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class IdlUser extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IdlUser\",\"namespace\":\"test\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"createdOn\",\"type\":[\"null\",\"long\"]},{\"name\":\"privacy\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"IdlPrivacy\",\"symbols\":[\"Public\",\"Private\"]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.Long createdOn;
  @Deprecated public test.IdlPrivacy privacy;

  /**
   * Default constructor.
   */
  public IdlUser() {}

  /**
   * All-args constructor.
   */
  public IdlUser(java.lang.CharSequence id, java.lang.Long createdOn, test.IdlPrivacy privacy) {
    this.id = id;
    this.createdOn = createdOn;
    this.privacy = privacy;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return createdOn;
    case 2: return privacy;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: createdOn = (java.lang.Long)value$; break;
    case 2: privacy = (test.IdlPrivacy)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Gets the value of the 'createdOn' field.
   */
  public java.lang.Long getCreatedOn() {
    return createdOn;
  }


  /**
   * Gets the value of the 'privacy' field.
   */
  public test.IdlPrivacy getPrivacy() {
    return privacy;
  }


  /** Creates a new IdlUser RecordBuilder */
  public static test.IdlUser.Builder newBuilder() {
    return new test.IdlUser.Builder();
  }
  
  /** Creates a new IdlUser RecordBuilder by copying an existing Builder */
  public static test.IdlUser.Builder newBuilder(test.IdlUser.Builder other) {
    return new test.IdlUser.Builder(other);
  }
  
  /** Creates a new IdlUser RecordBuilder by copying an existing IdlUser instance */
  public static test.IdlUser.Builder newBuilder(test.IdlUser other) {
    return new test.IdlUser.Builder(other);
  }
  
  /**
   * RecordBuilder for IdlUser instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IdlUser>
    implements org.apache.avro.data.RecordBuilder<IdlUser> {

    private java.lang.CharSequence id;
    private java.lang.Long createdOn;
    private test.IdlPrivacy privacy;

    /** Creates a new Builder */
    private Builder() {
      super(test.IdlUser.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(test.IdlUser.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing IdlUser instance */
    private Builder(test.IdlUser other) {
            super(test.IdlUser.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.createdOn)) {
        this.createdOn = data().deepCopy(fields()[1].schema(), other.createdOn);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.privacy)) {
        this.privacy = data().deepCopy(fields()[2].schema(), other.privacy);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public test.IdlUser.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public test.IdlUser.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'createdOn' field */
    public java.lang.Long getCreatedOn() {
      return createdOn;
    }
    
    /** Sets the value of the 'createdOn' field */
    public test.IdlUser.Builder setCreatedOn(java.lang.Long value) {
      validate(fields()[1], value);
      this.createdOn = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'createdOn' field has been set */
    public boolean hasCreatedOn() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'createdOn' field */
    public test.IdlUser.Builder clearCreatedOn() {
      createdOn = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'privacy' field */
    public test.IdlPrivacy getPrivacy() {
      return privacy;
    }
    
    /** Sets the value of the 'privacy' field */
    public test.IdlUser.Builder setPrivacy(test.IdlPrivacy value) {
      validate(fields()[2], value);
      this.privacy = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'privacy' field has been set */
    public boolean hasPrivacy() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'privacy' field */
    public test.IdlUser.Builder clearPrivacy() {
      privacy = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public IdlUser build() {
      try {
        IdlUser record = new IdlUser();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.createdOn = fieldSetFlags()[1] ? this.createdOn : (java.lang.Long) defaultValue(fields()[1]);
        record.privacy = fieldSetFlags()[2] ? this.privacy : (test.IdlPrivacy) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
