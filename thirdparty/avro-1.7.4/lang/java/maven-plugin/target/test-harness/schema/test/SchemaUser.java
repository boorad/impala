/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package test;  
@SuppressWarnings("all")
/** User Test Bean */
@org.apache.avro.specific.AvroGenerated
public class SchemaUser extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SchemaUser\",\"namespace\":\"test\",\"doc\":\"User Test Bean\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"createdOn\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"privacy\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"SchemaPrivacy\",\"symbols\":[\"Public\",\"Private\"]}],\"default\":null},{\"name\":\"privacyImported\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"PrivacyImport\",\"doc\":\"Privacy Test Enum\",\"symbols\":[\"Public\",\"Private\"]}],\"default\":null},{\"name\":\"privacyDirectImport\",\"type\":[\"null\",{\"type\":\"enum\",\"name\":\"PrivacyDirectImport\",\"doc\":\"Privacy Test Enum\",\"symbols\":[\"Public\",\"Private\"]}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.Long createdOn;
  @Deprecated public test.SchemaPrivacy privacy;
  @Deprecated public test.PrivacyImport privacyImported;
  @Deprecated public test.PrivacyDirectImport privacyDirectImport;

  /**
   * Default constructor.
   */
  public SchemaUser() {}

  /**
   * All-args constructor.
   */
  public SchemaUser(java.lang.CharSequence id, java.lang.Long createdOn, test.SchemaPrivacy privacy, test.PrivacyImport privacyImported, test.PrivacyDirectImport privacyDirectImport) {
    this.id = id;
    this.createdOn = createdOn;
    this.privacy = privacy;
    this.privacyImported = privacyImported;
    this.privacyDirectImport = privacyDirectImport;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return createdOn;
    case 2: return privacy;
    case 3: return privacyImported;
    case 4: return privacyDirectImport;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: createdOn = (java.lang.Long)value$; break;
    case 2: privacy = (test.SchemaPrivacy)value$; break;
    case 3: privacyImported = (test.PrivacyImport)value$; break;
    case 4: privacyDirectImport = (test.PrivacyDirectImport)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }


  /**
   * Gets the value of the 'createdOn' field.
   */
  public java.lang.Long getCreatedOn() {
    return createdOn;
  }


  /**
   * Gets the value of the 'privacy' field.
   */
  public test.SchemaPrivacy getPrivacy() {
    return privacy;
  }


  /**
   * Gets the value of the 'privacyImported' field.
   */
  public test.PrivacyImport getPrivacyImported() {
    return privacyImported;
  }


  /**
   * Gets the value of the 'privacyDirectImport' field.
   */
  public test.PrivacyDirectImport getPrivacyDirectImport() {
    return privacyDirectImport;
  }


  /** Creates a new SchemaUser RecordBuilder */
  public static test.SchemaUser.Builder newBuilder() {
    return new test.SchemaUser.Builder();
  }
  
  /** Creates a new SchemaUser RecordBuilder by copying an existing Builder */
  public static test.SchemaUser.Builder newBuilder(test.SchemaUser.Builder other) {
    return new test.SchemaUser.Builder(other);
  }
  
  /** Creates a new SchemaUser RecordBuilder by copying an existing SchemaUser instance */
  public static test.SchemaUser.Builder newBuilder(test.SchemaUser other) {
    return new test.SchemaUser.Builder(other);
  }
  
  /**
   * RecordBuilder for SchemaUser instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SchemaUser>
    implements org.apache.avro.data.RecordBuilder<SchemaUser> {

    private java.lang.CharSequence id;
    private java.lang.Long createdOn;
    private test.SchemaPrivacy privacy;
    private test.PrivacyImport privacyImported;
    private test.PrivacyDirectImport privacyDirectImport;

    /** Creates a new Builder */
    private Builder() {
      super(test.SchemaUser.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(test.SchemaUser.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing SchemaUser instance */
    private Builder(test.SchemaUser other) {
            super(test.SchemaUser.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.createdOn)) {
        this.createdOn = data().deepCopy(fields()[1].schema(), other.createdOn);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.privacy)) {
        this.privacy = data().deepCopy(fields()[2].schema(), other.privacy);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.privacyImported)) {
        this.privacyImported = data().deepCopy(fields()[3].schema(), other.privacyImported);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.privacyDirectImport)) {
        this.privacyDirectImport = data().deepCopy(fields()[4].schema(), other.privacyDirectImport);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public test.SchemaUser.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public test.SchemaUser.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'createdOn' field */
    public java.lang.Long getCreatedOn() {
      return createdOn;
    }
    
    /** Sets the value of the 'createdOn' field */
    public test.SchemaUser.Builder setCreatedOn(java.lang.Long value) {
      validate(fields()[1], value);
      this.createdOn = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'createdOn' field has been set */
    public boolean hasCreatedOn() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'createdOn' field */
    public test.SchemaUser.Builder clearCreatedOn() {
      createdOn = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'privacy' field */
    public test.SchemaPrivacy getPrivacy() {
      return privacy;
    }
    
    /** Sets the value of the 'privacy' field */
    public test.SchemaUser.Builder setPrivacy(test.SchemaPrivacy value) {
      validate(fields()[2], value);
      this.privacy = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'privacy' field has been set */
    public boolean hasPrivacy() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'privacy' field */
    public test.SchemaUser.Builder clearPrivacy() {
      privacy = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'privacyImported' field */
    public test.PrivacyImport getPrivacyImported() {
      return privacyImported;
    }
    
    /** Sets the value of the 'privacyImported' field */
    public test.SchemaUser.Builder setPrivacyImported(test.PrivacyImport value) {
      validate(fields()[3], value);
      this.privacyImported = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'privacyImported' field has been set */
    public boolean hasPrivacyImported() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'privacyImported' field */
    public test.SchemaUser.Builder clearPrivacyImported() {
      privacyImported = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'privacyDirectImport' field */
    public test.PrivacyDirectImport getPrivacyDirectImport() {
      return privacyDirectImport;
    }
    
    /** Sets the value of the 'privacyDirectImport' field */
    public test.SchemaUser.Builder setPrivacyDirectImport(test.PrivacyDirectImport value) {
      validate(fields()[4], value);
      this.privacyDirectImport = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'privacyDirectImport' field has been set */
    public boolean hasPrivacyDirectImport() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'privacyDirectImport' field */
    public test.SchemaUser.Builder clearPrivacyDirectImport() {
      privacyDirectImport = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public SchemaUser build() {
      try {
        SchemaUser record = new SchemaUser();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.createdOn = fieldSetFlags()[1] ? this.createdOn : (java.lang.Long) defaultValue(fields()[1]);
        record.privacy = fieldSetFlags()[2] ? this.privacy : (test.SchemaPrivacy) defaultValue(fields()[2]);
        record.privacyImported = fieldSetFlags()[3] ? this.privacyImported : (test.PrivacyImport) defaultValue(fields()[3]);
        record.privacyDirectImport = fieldSetFlags()[4] ? this.privacyDirectImport : (test.PrivacyDirectImport) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
