/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.apache.avro.ipc.specific;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"org.apache.avro.ipc.specific\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"year_of_birth\",\"type\":\"int\"},{\"name\":\"country\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"US\"},{\"name\":\"state\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"friends\",\"type\":{\"type\":\"array\",\"items\":\"Person\"},\"default\":[]},{\"name\":\"languages\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"default\":[\"English\",\"Java\"]},{\"name\":\"defaultPrivacy\",\"type\":{\"type\":\"enum\",\"name\":\"PrivacyType\",\"symbols\":[\"FRIENDS\",\"FRIENDS_OF_FRIENDS\",\"PUBLIC\",\"CUSTOM\"]},\"default\":\"FRIENDS\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String name;
  @Deprecated public int year_of_birth;
  @Deprecated public java.lang.String country;
  @Deprecated public java.lang.String state;
  @Deprecated public java.util.List<org.apache.avro.ipc.specific.Person> friends;
  @Deprecated public java.util.List<java.lang.String> languages;
  @Deprecated public org.apache.avro.ipc.specific.PrivacyType defaultPrivacy;

  /**
   * Default constructor.
   */
  public Person() {}

  /**
   * All-args constructor.
   */
  public Person(java.lang.String name, java.lang.Integer year_of_birth, java.lang.String country, java.lang.String state, java.util.List<org.apache.avro.ipc.specific.Person> friends, java.util.List<java.lang.String> languages, org.apache.avro.ipc.specific.PrivacyType defaultPrivacy) {
    this.name = name;
    this.year_of_birth = year_of_birth;
    this.country = country;
    this.state = state;
    this.friends = friends;
    this.languages = languages;
    this.defaultPrivacy = defaultPrivacy;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return year_of_birth;
    case 2: return country;
    case 3: return state;
    case 4: return friends;
    case 5: return languages;
    case 6: return defaultPrivacy;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: year_of_birth = (java.lang.Integer)value$; break;
    case 2: country = (java.lang.String)value$; break;
    case 3: state = (java.lang.String)value$; break;
    case 4: friends = (java.util.List<org.apache.avro.ipc.specific.Person>)value$; break;
    case 5: languages = (java.util.List<java.lang.String>)value$; break;
    case 6: defaultPrivacy = (org.apache.avro.ipc.specific.PrivacyType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'year_of_birth' field.
   */
  public java.lang.Integer getYearOfBirth() {
    return year_of_birth;
  }

  /**
   * Sets the value of the 'year_of_birth' field.
   * @param value the value to set.
   */
  public void setYearOfBirth(java.lang.Integer value) {
    this.year_of_birth = value;
  }

  /**
   * Gets the value of the 'country' field.
   */
  public java.lang.String getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.String value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'state' field.
   */
  public java.lang.String getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.String value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'friends' field.
   */
  public java.util.List<org.apache.avro.ipc.specific.Person> getFriends() {
    return friends;
  }

  /**
   * Sets the value of the 'friends' field.
   * @param value the value to set.
   */
  public void setFriends(java.util.List<org.apache.avro.ipc.specific.Person> value) {
    this.friends = value;
  }

  /**
   * Gets the value of the 'languages' field.
   */
  public java.util.List<java.lang.String> getLanguages() {
    return languages;
  }

  /**
   * Sets the value of the 'languages' field.
   * @param value the value to set.
   */
  public void setLanguages(java.util.List<java.lang.String> value) {
    this.languages = value;
  }

  /**
   * Gets the value of the 'defaultPrivacy' field.
   */
  public org.apache.avro.ipc.specific.PrivacyType getDefaultPrivacy() {
    return defaultPrivacy;
  }

  /**
   * Sets the value of the 'defaultPrivacy' field.
   * @param value the value to set.
   */
  public void setDefaultPrivacy(org.apache.avro.ipc.specific.PrivacyType value) {
    this.defaultPrivacy = value;
  }

  /** Creates a new Person RecordBuilder */
  public static org.apache.avro.ipc.specific.Person.Builder newBuilder() {
    return new org.apache.avro.ipc.specific.Person.Builder();
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Builder */
  public static org.apache.avro.ipc.specific.Person.Builder newBuilder(org.apache.avro.ipc.specific.Person.Builder other) {
    return new org.apache.avro.ipc.specific.Person.Builder(other);
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Person instance */
  public static org.apache.avro.ipc.specific.Person.Builder newBuilder(org.apache.avro.ipc.specific.Person other) {
    return new org.apache.avro.ipc.specific.Person.Builder(other);
  }
  
  /**
   * RecordBuilder for Person instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    private java.lang.String name;
    private int year_of_birth;
    private java.lang.String country;
    private java.lang.String state;
    private java.util.List<org.apache.avro.ipc.specific.Person> friends;
    private java.util.List<java.lang.String> languages;
    private org.apache.avro.ipc.specific.PrivacyType defaultPrivacy;

    /** Creates a new Builder */
    private Builder() {
      super(org.apache.avro.ipc.specific.Person.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.apache.avro.ipc.specific.Person.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Person instance */
    private Builder(org.apache.avro.ipc.specific.Person other) {
            super(org.apache.avro.ipc.specific.Person.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.year_of_birth)) {
        this.year_of_birth = data().deepCopy(fields()[1].schema(), other.year_of_birth);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.country)) {
        this.country = data().deepCopy(fields()[2].schema(), other.country);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.friends)) {
        this.friends = data().deepCopy(fields()[4].schema(), other.friends);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.languages)) {
        this.languages = data().deepCopy(fields()[5].schema(), other.languages);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.defaultPrivacy)) {
        this.defaultPrivacy = data().deepCopy(fields()[6].schema(), other.defaultPrivacy);
        fieldSetFlags()[6] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.String getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public org.apache.avro.ipc.specific.Person.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public org.apache.avro.ipc.specific.Person.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'year_of_birth' field */
    public java.lang.Integer getYearOfBirth() {
      return year_of_birth;
    }
    
    /** Sets the value of the 'year_of_birth' field */
    public org.apache.avro.ipc.specific.Person.Builder setYearOfBirth(int value) {
      validate(fields()[1], value);
      this.year_of_birth = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'year_of_birth' field has been set */
    public boolean hasYearOfBirth() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'year_of_birth' field */
    public org.apache.avro.ipc.specific.Person.Builder clearYearOfBirth() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'country' field */
    public java.lang.String getCountry() {
      return country;
    }
    
    /** Sets the value of the 'country' field */
    public org.apache.avro.ipc.specific.Person.Builder setCountry(java.lang.String value) {
      validate(fields()[2], value);
      this.country = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'country' field has been set */
    public boolean hasCountry() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'country' field */
    public org.apache.avro.ipc.specific.Person.Builder clearCountry() {
      country = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'state' field */
    public java.lang.String getState() {
      return state;
    }
    
    /** Sets the value of the 'state' field */
    public org.apache.avro.ipc.specific.Person.Builder setState(java.lang.String value) {
      validate(fields()[3], value);
      this.state = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'state' field has been set */
    public boolean hasState() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'state' field */
    public org.apache.avro.ipc.specific.Person.Builder clearState() {
      state = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'friends' field */
    public java.util.List<org.apache.avro.ipc.specific.Person> getFriends() {
      return friends;
    }
    
    /** Sets the value of the 'friends' field */
    public org.apache.avro.ipc.specific.Person.Builder setFriends(java.util.List<org.apache.avro.ipc.specific.Person> value) {
      validate(fields()[4], value);
      this.friends = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'friends' field has been set */
    public boolean hasFriends() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'friends' field */
    public org.apache.avro.ipc.specific.Person.Builder clearFriends() {
      friends = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'languages' field */
    public java.util.List<java.lang.String> getLanguages() {
      return languages;
    }
    
    /** Sets the value of the 'languages' field */
    public org.apache.avro.ipc.specific.Person.Builder setLanguages(java.util.List<java.lang.String> value) {
      validate(fields()[5], value);
      this.languages = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'languages' field has been set */
    public boolean hasLanguages() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'languages' field */
    public org.apache.avro.ipc.specific.Person.Builder clearLanguages() {
      languages = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'defaultPrivacy' field */
    public org.apache.avro.ipc.specific.PrivacyType getDefaultPrivacy() {
      return defaultPrivacy;
    }
    
    /** Sets the value of the 'defaultPrivacy' field */
    public org.apache.avro.ipc.specific.Person.Builder setDefaultPrivacy(org.apache.avro.ipc.specific.PrivacyType value) {
      validate(fields()[6], value);
      this.defaultPrivacy = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'defaultPrivacy' field has been set */
    public boolean hasDefaultPrivacy() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'defaultPrivacy' field */
    public org.apache.avro.ipc.specific.Person.Builder clearDefaultPrivacy() {
      defaultPrivacy = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public Person build() {
      try {
        Person record = new Person();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.year_of_birth = fieldSetFlags()[1] ? this.year_of_birth : (java.lang.Integer) defaultValue(fields()[1]);
        record.country = fieldSetFlags()[2] ? this.country : (java.lang.String) defaultValue(fields()[2]);
        record.state = fieldSetFlags()[3] ? this.state : (java.lang.String) defaultValue(fields()[3]);
        record.friends = fieldSetFlags()[4] ? this.friends : (java.util.List<org.apache.avro.ipc.specific.Person>) defaultValue(fields()[4]);
        record.languages = fieldSetFlags()[5] ? this.languages : (java.util.List<java.lang.String>) defaultValue(fields()[5]);
        record.defaultPrivacy = fieldSetFlags()[6] ? this.defaultPrivacy : (org.apache.avro.ipc.specific.PrivacyType) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
