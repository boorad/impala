/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class finally$ extends org.apache.avro.specific.SpecificExceptionBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"error\",\"name\":\"finally\",\"fields\":[{\"name\":\"catch\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public boolean catch$;

  public finally$() {
    super();
  }
  
  public finally$(Object value) {
    super(value);
  }

  public finally$(Throwable cause) {
    super(cause);
  }

  public finally$(Object value, Throwable cause) {
    super(value, cause);
  }
  
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return catch$;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: catch$ = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'catch$' field.
   */
  public java.lang.Boolean getCatch$() {
    return catch$;
  }

  /**
   * Sets the value of the 'catch$' field.
   * @param value the value to set.
   */
  public void setCatch$(java.lang.Boolean value) {
    this.catch$ = value;
  }

  /** Creates a new finally$ RecordBuilder */
  public static finally$.Builder newBuilder() {
    return new finally$.Builder();
  }
  
  /** Creates a new finally$ RecordBuilder by copying an existing Builder */
  public static finally$.Builder newBuilder(finally$.Builder other) {
    return new finally$.Builder(other);
  }
  
  /** Creates a new finally$ RecordBuilder by copying an existing finally$ instance */
  public static finally$.Builder newBuilder(finally$ other) {
    return new finally$.Builder(other);
  }
  
  /**
   * RecordBuilder for finally$ instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificErrorBuilderBase<finally$>
    implements org.apache.avro.data.ErrorBuilder<finally$> {

    private boolean catch$;

    /** Creates a new Builder */
    private Builder() {
      super(finally$.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(finally$.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing finally$ instance */
    private Builder(finally$ other) {
      super(other);
      if (isValidValue(fields()[0], other.catch$)) {
        this.catch$ = data().deepCopy(fields()[0].schema(), other.catch$);
        fieldSetFlags()[0] = true;
      }
    }

    @Override
    public finally$.Builder setValue(Object value) {
      super.setValue(value);
      return this;
    }
    
    @Override
    public finally$.Builder clearValue() {
      super.clearValue();
      return this;
    }

    @Override
    public finally$.Builder setCause(Throwable cause) {
      super.setCause(cause);
      return this;
    }
    
    @Override
    public finally$.Builder clearCause() {
      super.clearCause();
      return this;
    }

    /** Gets the value of the 'catch$' field */
    public java.lang.Boolean getCatch$() {
      return catch$;
    }
    
    /** Sets the value of the 'catch$' field */
    public finally$.Builder setCatch$(boolean value) {
      validate(fields()[0], value);
      this.catch$ = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'catch$' field has been set */
    public boolean hasCatch$() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'catch$' field */
    public finally$.Builder clearCatch$() {
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public finally$ build() {
      try {
        finally$ record = new finally$(getValue(), getCause());
        record.catch$ = fieldSetFlags()[0] ? this.catch$ : (java.lang.Boolean) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
