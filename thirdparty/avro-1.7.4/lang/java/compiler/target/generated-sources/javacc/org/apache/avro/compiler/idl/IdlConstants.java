/* Generated By:JavaCC: Do not edit this line. IdlConstants.java */
package org.apache.avro.compiler.idl;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface IdlConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int ARRAY = 12;
  /** RegularExpression Id. */
  int BOOLEAN = 13;
  /** RegularExpression Id. */
  int DOUBLE = 14;
  /** RegularExpression Id. */
  int ENUM = 15;
  /** RegularExpression Id. */
  int ERROR = 16;
  /** RegularExpression Id. */
  int FALSE = 17;
  /** RegularExpression Id. */
  int FIXED = 18;
  /** RegularExpression Id. */
  int FLOAT = 19;
  /** RegularExpression Id. */
  int IDL = 20;
  /** RegularExpression Id. */
  int IMPORT = 21;
  /** RegularExpression Id. */
  int INT = 22;
  /** RegularExpression Id. */
  int LONG = 23;
  /** RegularExpression Id. */
  int MAP = 24;
  /** RegularExpression Id. */
  int ONEWAY = 25;
  /** RegularExpression Id. */
  int BYTES = 26;
  /** RegularExpression Id. */
  int SCHEMA = 27;
  /** RegularExpression Id. */
  int STRING = 28;
  /** RegularExpression Id. */
  int NULL = 29;
  /** RegularExpression Id. */
  int PROTOCOL = 30;
  /** RegularExpression Id. */
  int RECORD = 31;
  /** RegularExpression Id. */
  int THROWS = 32;
  /** RegularExpression Id. */
  int TRUE = 33;
  /** RegularExpression Id. */
  int UNION = 34;
  /** RegularExpression Id. */
  int VOID = 35;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 36;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 37;
  /** RegularExpression Id. */
  int HEX_LITERAL = 38;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 39;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 40;
  /** RegularExpression Id. */
  int DECIMAL_FLOATING_POINT_LITERAL = 41;
  /** RegularExpression Id. */
  int DECIMAL_EXPONENT = 42;
  /** RegularExpression Id. */
  int HEXADECIMAL_FLOATING_POINT_LITERAL = 43;
  /** RegularExpression Id. */
  int HEXADECIMAL_EXPONENT = 44;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 45;
  /** RegularExpression Id. */
  int STRING_LITERAL = 46;
  /** RegularExpression Id. */
  int IDENTIFIER = 47;
  /** RegularExpression Id. */
  int LETTER = 48;
  /** RegularExpression Id. */
  int PART_LETTER = 49;
  /** RegularExpression Id. */
  int LPAREN = 50;
  /** RegularExpression Id. */
  int RPAREN = 51;
  /** RegularExpression Id. */
  int LBRACE = 52;
  /** RegularExpression Id. */
  int RBRACE = 53;
  /** RegularExpression Id. */
  int LBRACK = 54;
  /** RegularExpression Id. */
  int RBRACK = 55;
  /** RegularExpression Id. */
  int COLON = 56;
  /** RegularExpression Id. */
  int SEMICOLON = 57;
  /** RegularExpression Id. */
  int COMMA = 58;
  /** RegularExpression Id. */
  int AT = 59;
  /** RegularExpression Id. */
  int EQUALS = 60;
  /** RegularExpression Id. */
  int DOT = 61;
  /** RegularExpression Id. */
  int LT = 62;
  /** RegularExpression Id. */
  int GT = 63;
  /** RegularExpression Id. */
  int TICK = 64;
  /** RegularExpression Id. */
  int STUFF_TO_IGNORE = 66;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int DOC_COMMENT = 1;
  /** Lexical state. */
  int MULTI_LINE_COMMENT = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 7>",
    "\"/*\"",
    "<token of kind 9>",
    "\"*/\"",
    "\"*/\"",
    "\"array\"",
    "\"boolean\"",
    "\"double\"",
    "\"enum\"",
    "\"error\"",
    "\"false\"",
    "\"fixed\"",
    "\"float\"",
    "\"idl\"",
    "\"import\"",
    "\"int\"",
    "\"long\"",
    "\"map\"",
    "\"oneway\"",
    "\"bytes\"",
    "\"schema\"",
    "\"string\"",
    "\"null\"",
    "\"protocol\"",
    "\"record\"",
    "\"throws\"",
    "\"true\"",
    "\"union\"",
    "\"void\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<DECIMAL_FLOATING_POINT_LITERAL>",
    "<DECIMAL_EXPONENT>",
    "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
    "<HEXADECIMAL_EXPONENT>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"@\"",
    "\"=\"",
    "\".\"",
    "\"<\"",
    "\">\"",
    "\"`\"",
    "\"\\u001a\"",
    "<STUFF_TO_IGNORE>",
  };

}
